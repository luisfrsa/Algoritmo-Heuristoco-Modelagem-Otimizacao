
class Tabuleiro:
	def __init__(self):
		self.lista_tabuleiro =  [[0 for x in range(4)] for y in range(4)]  
		self.g = 0
		self.h = 0
		self.pai = 0

	def __lt__(self, other):
		if (self.g < other.g):
			return True
		return False

	def setPai(self,pai):
		self.g = pai.g+1
		self.pai = pai

	def calculaH1(self,j,i,valor_comparador):
		if(self.lista_tabuleiro[j][i] != valor_comparador):
			self.h = self.h+1
		
			
	#aqui serÃ¡: verificado se tabuleiro resolvido, e calculada heuristica
	def verificaTabuleiroResolvido(self):
		valor_comparador = 1
		tabuleiro_resolvido = True	
		for i in range (0,4):
			for j in range (0,4):
				if(self.lista_tabuleiro[j][i] != valor_comparador):
					tabuleiro_resolvido = False	
				self.calculaH1(j,i,valor_comparador)
				valor_comparador = valor_comparador+1	
		#if(tabuleiro_resolvido==True):
			#self.printTabuleiro()
		return tabuleiro_resolvido




	def stringTabuleiroIJ(i,j):
		return "Tabuleiro [",i,"][",j,"]: "

	def inicializaTabuleiro(self,entrada):
		array_entrada = entrada.split(" ")
		indice_entrada = 0
		for i in range (0,4):
			for j in range (0,4):
				valor_inteiro = int(array_entrada[i+(4*j)])
				if(valor_inteiro==0):
					valor_inteiro = 16
				self.lista_tabuleiro[j][i] = valor_inteiro
				indice_entrada=indice_entrada+1	


	def printTabuleiro(self):
		print(".::Print Tabuleiro::.")
		for i in range (0,4):
			temp_tab = self.lista_tabuleiro[i][:]
			words = ["X" if x==16 else x for x in temp_tab]
			print(words)
		print(" ")

import bisect 


class Jogo:

	def __init__(self):
		self.hash_tabuleiros_visitados = set()
		self.tabuleiros_abertos = []
	
	def inicia_resolucao(self,Tabuleiro):
		if(not Tabuleiro.verificaTabuleiroResolvido()):
			self.converte_tabuleiro_hash(Tabuleiro)
			return self.resolve_jogo()
		else:
			return Tabuleiro

	def resolve_jogo(self):
		
		while(len(self.tabuleiros_abertos) > 0):
			Tabuleiro = self.tabuleiros_abertos.pop(0)
			tentativa_resolucao = self.gera_opcoes_movimentos(Tabuleiro[1])
			if(tentativa_resolucao!=False):
				#print("Jogo Resolvido!!!")
				return tentativa_resolucao
		#print("Impossivel resolver jogo")
		return False

	def verifica_sequencia_repetida(self,Tabuleiro,valor_hash):
		if(valor_hash in self.hash_tabuleiros_visitados):
			return False
		self.hash_tabuleiros_visitados.add(valor_hash)
		#db(self.tabuleiros_abertos)
		bisect.insort(self.tabuleiros_abertos, [(Tabuleiro.g+Tabuleiro.h),Tabuleiro]) 

	def converte_tabuleiro_hash(self,Tabuleiro):		
		tabuleiro_temp = []
		for i in range (0,4):
			tabuleiro_temp.append(hash(tuple(Tabuleiro.lista_tabuleiro[i])))
		self.verifica_sequencia_repetida(Tabuleiro,hash(tuple(tabuleiro_temp)))

	def busca_dezesseis(self,Tabuleiro):
		for i in range (0,4):
			for j in range (0,4):
				if(Tabuleiro.lista_tabuleiro[i][j]==16):
					#i = 3, j = 0
					return [i,j]


	def gera_opcoes_movimentos(self,Tabuleiro):
		#print(Tabuleiro.lista_tabuleiro)

		ij = self.busca_dezesseis(Tabuleiro)

		i = ij[0]
		j = ij[1]		

		if(i+1 <=3):
			retorno = self.move_peca(Tabuleiro,i,j,(i+1),j)
			if(retorno!=False):
				return retorno
		if(j+1 <=3):		
			retorno = self.move_peca(Tabuleiro,i,j,i,(j+1))
			if(retorno!=False):
				return retorno
		if(i-1 >=0):
			retorno = self.move_peca(Tabuleiro,i,j,(i-1),j)
			if(retorno!=False):
				return retorno
		if(j-1 >=0):
			retorno = self.move_peca(Tabuleiro,i,j,i,(j-1))
			if(retorno!=False):
				return retorno
		return False


	def move_peca(self,tab_pai,i16, j16, iAlvo, jAlvo):
		tab_copy  = [row[:] for row in tab_pai.lista_tabuleiro]

		tab_copy[i16][j16] = tab_copy[iAlvo][jAlvo]
		tab_copy[iAlvo][jAlvo] = 16

		Tabuleiro_novo = Tabuleiro()
		Tabuleiro_novo.setPai(tab_pai)
		Tabuleiro_novo.lista_tabuleiro = tab_copy
		#Tabuleiro_novo.printTabuleiro()
		#time.sleep(1)
		if(Tabuleiro_novo.verificaTabuleiroResolvido()):
			return Tabuleiro_novo
		else:
			self.converte_tabuleiro_hash(Tabuleiro_novo)
			return False

	def print_resultado(self,Tabuleiro):
		lista_resultado = []
		lista_resultado.append(Tabuleiro)
		pai = Tabuleiro.pai
		while(pai != 0):
			Tabuleiro = pai
			lista_resultado.append(Tabuleiro)
			pai = Tabuleiro.pai

		for t in lista_resultado[::-1]:
			t.printTabuleiro()	
		print("Jogo resolvido em ",(len(lista_resultado)-1)," passos")




#valor_entrada = "2 1 5 9 3 6 10 13 4 7 11 14 0 8 12 15"; # 9 passos
valor_entrada = "2 1 5 0 7 9 10 13 6 4 3 15 8 11 12 14";# 25 passos
jogo = Jogo()
jogo_ordenado = Jogo()

tabuleiro = Tabuleiro()
tabuleiro.inicializaTabuleiro(valor_entrada)

resultado = jogo.inicia_resolucao(tabuleiro)
if(resultado!=False):
	#jogo.print_resultado(resultado)
	print("0")
else:
	print("0")

